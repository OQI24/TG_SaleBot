import { getUserAds, getUserCounts } from '../db/api';
import { BotContext, Steps, StickerType } from '../types/botContext';
import { removeKeyboard, sendReply, sendSticker } from '../utils/sendReply';
import { deleteAds } from './deleteAds';

export const createOffer = async (ctx: BotContext) => {
  const [adsCount, adsLimit] = await getUserCounts(ctx);
  
  if (adsCount >= adsLimit) {
    await sendReply(ctx, '–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –†–∞—Å—à–∏—Ä—å—Ç–µ –ª–∏–º–∏—Ç –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', ['–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç']);
    return;
  }
  
  ctx.session = { actionType: 'create' };
  ctx.session.step = Steps.OFFER_TYPE;
  await sendReply(ctx, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', ['–ü—Ä–æ–¥–∞–º', '–ö—É–ø–ª—é']);
};

export const deleteOffer = async (ctx: BotContext) => {
  if (ctx.message?.text?.startsWith('üóë')) {
    await deleteAds(ctx);
    ctx.session = {};
    return;
  }

  if (ctx.message?.text?.startsWith('ü•π')) {
    ctx.session = {};
    await sendSticker(ctx, StickerType.GOODBYE);
    await removeKeyboard(ctx, '–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ —á—Ç–æ, —è –≤—Å–µ–≥–¥–∞ —Ç—É—Ç! –ê –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞ \nüëá');
    return;
  }

  if (Number(ctx.message?.text) >= 0) {
    ctx.session.deleteAdId = ctx.session.adsIds?.[Number(ctx.message?.text) - 1];
    await sendReply(ctx, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ\n' + ctx.session.links?.[Number(ctx.message?.text) - 1], ['üóë –î–∞, –ø—Ä–æ—á—å –µ–≥–æ!', 'ü•π –ù–µ—Ç, –ø–µ—Ä–µ–¥—É–º–∞–ª']);
    return;
  }

  ctx.session = { actionType: 'delete' };
  const links = await getAdsList(ctx);
  await sendReply(ctx, '–ö–∞–∫–æ–µ —É–¥–∞–ª–∏—Ç—å?', links.map((_link: string, index: number) => String(index + 1)));
};

export const getAdsList = async (ctx: BotContext) => {
  await removeKeyboard(ctx);
  const ads = await getUserAds(ctx);
  const adsLinks = Object.keys(ads).map((ad: string) => ads[ad].link);
  const adsIds = Object.keys(ads).map((ad: string) => ads[ad].messageId);
  ctx.session.links = adsLinks;
  ctx.session.adsIds = adsIds;
  const adsList = adsLinks.map((link: string, index: number) => `${index + 1}. ${link}`);
  await sendReply(ctx, '–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: \n' + adsList.join('\n'));
  return adsLinks;
};
